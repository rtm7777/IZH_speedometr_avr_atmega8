
AVRASM ver. 2.1.9  speedometr.asm Fri Nov 22 16:40:16 2013

speedometr.asm(989): Including file 'speedometr.vec'
speedometr.asm(990): Including file 'speedometr.inc'
speedometr.inc(6): warning: Register r5 already defined by the .DEF directive
speedometr.asm(990): 'speedometr.inc' included form here
speedometr.inc(7): warning: Register r6 already defined by the .DEF directive
speedometr.asm(990): 'speedometr.inc' included form here
speedometr.inc(8): warning: Register r8 already defined by the .DEF directive
speedometr.asm(990): 'speedometr.inc' included form here
speedometr.inc(9): warning: Register r10 already defined by the .DEF directive
speedometr.asm(990): 'speedometr.inc' included form here
speedometr.inc(10): warning: Register r12 already defined by the .DEF directive
speedometr.asm(990): 'speedometr.inc' included form here
                 
                 
                 ;CodeVisionAVR C Compiler V1.25.8 Standard
                 ;(C) Copyright 1998-2007 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External SRAM size     : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;8 bit enums            : Yes
                 ;Word align FLASH struct: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0
                 
                 	.INCLUDE "speedometr.vec"
                 
                 ;INTERRUPT VECTORS
000000 c01c      	RJMP __RESET
000001 c071      	RJMP _ext_int0_isr
000002 cffd      	RJMP 0x00
000003 c0b0      	RJMP _timer2_comp_isr
000004 c086      	RJMP _timer2_ovf_isr
000005 cffa      	RJMP 0x00
000006 c074      	RJMP _timer1_compa_isr
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 	.INCLUDE "speedometr.inc"
                 
                 _digits:
000013 e908
000014 4111
000015 42e0
000016 6902      	.DB  0x8,0xE9,0x11,0x41,0xE0,0x42,0x2,0x69
000017 4000
000018 7bfb
000019 ebf9
00001a bbdb      	.DB  0x0,0x40,0xFB,0x7B,0xF9,0xEB,0xDB,0xBB
speedometr.inc(5): warning: .cseg .db misalignment - padding zero byte
speedometr.asm(990): 'speedometr.inc' included form here
00001b 00fa      	.DB  0xFA
                 	.DEF _cur_dig=R5
                 	.DEF _indication=R6
                 	.DEF _i=R8
                 	.DEF _imp=R10
                 	.DEF _x=R12
                 
                 __GLOBAL_INI_TBL:
00001c 0000      	.DW  0
                 _0x26:
                 
                 __RESET:
00001d 94f8      	CLI
00001e 27ee      	CLR  R30
00001f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000020 e0f1      	LDI  R31,1
000021 bffb      	OUT  GICR,R31
000022 bfeb      	OUT  GICR,R30
000023 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000024 e1f8      	LDI  R31,0x18
000025 bdf1      	OUT  WDTCR,R31
000026 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000027 e08d      	LDI  R24,13
000028 e0a2      	LDI  R26,2
000029 27bb      	CLR  R27
                 __CLEAR_REG:
00002a 93ed      	ST   X+,R30
00002b 958a      	DEC  R24
00002c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002d e080      	LDI  R24,LOW(0x400)
00002e e094      	LDI  R25,HIGH(0x400)
00002f e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000030 93ed      	ST   X+,R30
000031 9701      	SBIW R24,1
000032 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000033 e3e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000034 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000035 9185      	LPM  R24,Z+
000036 9195      	LPM  R25,Z+
000037 9700      	SBIW R24,0
000038 f061      	BREQ __GLOBAL_INI_END
000039 91a5      	LPM  R26,Z+
00003a 91b5      	LPM  R27,Z+
00003b 9005      	LPM  R0,Z+
00003c 9015      	LPM  R1,Z+
00003d 01bf      	MOVW R22,R30
00003e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003f 9005      	LPM  R0,Z+
000040 920d      	ST   X+,R0
000041 9701      	SBIW R24,1
000042 f7e1      	BRNE __GLOBAL_INI_LOOP
000043 01fb      	MOVW R30,R22
000044 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000045 e5ef      	LDI  R30,LOW(0x45F)
000046 bfed      	OUT  SPL,R30
000047 e0e4      	LDI  R30,HIGH(0x45F)
000048 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000049 e6c0      	LDI  R28,LOW(0x160)
00004a e0d1      	LDI  R29,HIGH(0x160)
                 
00004b c06d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 ;       1 #include <mega8.h>
                 ;       2 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 ;       3 	#define __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 ;       4 	.EQU __se_bit=0x80
                 	.EQU __se_bit=0x80
                 ;       5 	.EQU __sm_mask=0x70
                 	.EQU __sm_mask=0x70
                 ;       6 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powerdown=0x20
                 ;       7 	.EQU __sm_powersave=0x30
                 	.EQU __sm_powersave=0x30
                 ;       8 	.EQU __sm_standby=0x60
                 	.EQU __sm_standby=0x60
                 ;       9 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_ext_standby=0x70
                 ;      10 	.EQU __sm_adc_noise_red=0x10
                 	.EQU __sm_adc_noise_red=0x10
                 ;      11 	.SET power_ctrl_reg=mcucr
                 	.SET power_ctrl_reg=mcucr
                 ;      12 	#endif
                 	#endif
                 ;      13 #include <delay.h>
                 ;      14 
                 ;      15 #define digit1 PORTC.0
                 ;      16 #define digit2 PORTC.1
                 ;      17 #define digit3 PORTC.2
                 ;      18 
                 ;      19 flash char digits[] = {
                 
                 	.CSEG
                 ;      20 0b00001000,                   //0
                 ;      21 0b11101001,                   //1
                 ;      22 0b00010001,                   //2
                 ;      23 0b01000001,                   //3
                 ;      24 0b11100000,                   //4  digits for anode
                 ;      25 0b01000010,                   //5
                 ;      26 0b00000010,                   //6
                 ;      27 0b01101001,                   //7
                 ;      28 0b00000000,                   //8
                 ;      29 0b01000000,                   //9
                 ;      30 
                 ;      31 0b11111011,                   //none 10
                 ;      32 0b01111011,                   //a    11
                 ;      33 0b11111001,                   //b    12
                 ;      34 0b11101011,                   //c    13
                 ;      35 0b11011011,                   //d  discrete segments
                 ;      36 0b10111011,                   //e    15
                 ;      37 0b11111010                    //f    16
                 ;      38 };
                 ;      39 
                 ;      40 
                 ;      41 char digit_out[3], cur_dig ;
                 
                 	.DSEG
                 _digit_out:
000160           	.BYTE 0x3
                 ;      42 unsigned int indication;
                 ;      43 unsigned int i;
                 ;      44 unsigned int imp;
                 ;      45 int x, y;
                 _y:
000163           	.BYTE 0x2
                 ;      46 
                 ;      47 
                 ;      48  void recoding(void)
                 ;      49  {
                 
                 	.CSEG
                 _recoding:
                 ;      50  if (indication<1000)
00004c eee8      	LDI  R30,LOW(1000)
00004d e0f3      	LDI  R31,HIGH(1000)
00004e 166e      	CP   R6,R30
00004f 067f      	CPC  R7,R31
000050 f508      	BRSH _0x3
                 ;      51  {
                 ;      52  digit_out[0]=indication%10;
000051 01d3      	MOVW R26,R6
000052 e0ea      	LDI  R30,LOW(10)
000053 e0f0      	LDI  R31,HIGH(10)
000054 d0fd      	RCALL __MODW21U
000055 93e0 0160 	STS  _digit_out,R30
                 ;      53  indication=indication/10;
000057 01d3      	MOVW R26,R6
000058 e0ea      	LDI  R30,LOW(10)
000059 e0f0      	LDI  R31,HIGH(10)
00005a d0e4      	RCALL __DIVW21U
00005b 013f      	MOVW R6,R30
                 ;      54  digit_out[1]=indication%10;
00005c 01d3      	MOVW R26,R6
00005d e0ea      	LDI  R30,LOW(10)
00005e e0f0      	LDI  R31,HIGH(10)
00005f d0f2      	RCALL __MODW21U
000060 93e0 0161 	__PUTB1MN _digit_out,1
                 ;      55  indication=indication/10;
000062 01d3      	MOVW R26,R6
000063 e0ea      	LDI  R30,LOW(10)
000064 e0f0      	LDI  R31,HIGH(10)
000065 d0d9      	RCALL __DIVW21U
000066 013f      	MOVW R6,R30
                 ;      56  digit_out[2]=indication%10;
000067 01d3      	MOVW R26,R6
000068 e0ea      	LDI  R30,LOW(10)
000069 e0f0      	LDI  R31,HIGH(10)
00006a d0e7      	RCALL __MODW21U
00006b 93e0 0162 	__PUTB1MN _digit_out,2
                 ;      57  indication=indication/10;
00006d 01d3      	MOVW R26,R6
00006e e0ea      	LDI  R30,LOW(10)
00006f e0f0      	LDI  R31,HIGH(10)
000070 d0ce      	RCALL __DIVW21U
000071 013f      	MOVW R6,R30
                 ;      58  }
                 ;      59  }
                 _0x3:
000072 9508      	RET
                 ;      60 
                 ;      61 // External Interrupt 0 service routine
                 ;      62 interrupt [EXT_INT0] void ext_int0_isr(void)
                 ;      63 {
                 _ext_int0_isr:
000073 93ea      	ST   -Y,R30
000074 93fa      	ST   -Y,R31
000075 b7ef      	IN   R30,SREG
000076 93ea      	ST   -Y,R30
                 ;      64 i++;
000077 01f4      	MOVW R30,R8
000078 9631      	ADIW R30,1
000079 014f      	MOVW R8,R30
                 ;      65 }
00007a c00b      	RJMP _0x25
                 ;      66 
                 ;      67 // Timer 1 output compare A interrupt service routine
                 ;      68 interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ;      69 {
                 _timer1_compa_isr:
00007b 93ea      	ST   -Y,R30
00007c 93fa      	ST   -Y,R31
00007d b7ef      	IN   R30,SREG
00007e 93ea      	ST   -Y,R30
                 ;      70 imp=i;
00007f 0154      	MOVW R10,R8
                 ;      71 i=0;
000080 2488      	CLR  R8
000081 2499      	CLR  R9
                 ;      72 TCNT1=0;
000082 e0e0      	LDI  R30,LOW(0)
000083 e0f0      	LDI  R31,HIGH(0)
000084 bdfd      	OUT  0x2C+1,R31
000085 bdec      	OUT  0x2C,R30
                 ;      73 }
                 _0x25:
000086 91e9      	LD   R30,Y+
000087 bfef      	OUT  SREG,R30
000088 91f9      	LD   R31,Y+
000089 91e9      	LD   R30,Y+
00008a 9518      	RETI
                 ;      74 
                 ;      75 
                 ;      76 // Timer 2 overflow interrupt service routine
                 ;      77 interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ;      78 {
                 _timer2_ovf_isr:
00008b 920a      	ST   -Y,R0
00008c 93ea      	ST   -Y,R30
00008d 93fa      	ST   -Y,R31
00008e b7ef      	IN   R30,SREG
00008f 93ea      	ST   -Y,R30
                 ;      79 switch (cur_dig)
000090 2de5      	MOV  R30,R5
                 ;      80   {
                 ;      81   case 0:{digit3=0;digit1=1;PORTD=digits[digit_out[cur_dig]];break;};
000091 30e0      	CPI  R30,0
000092 f419      	BRNE _0x7
000093 98aa      	CBI  0x15,2
000094 9aa8      	SBI  0x15,0
000095 c009      	RJMP _0x23
                 ;      82   case 1:{digit1=0;digit2=1;PORTD=digits[digit_out[cur_dig]];break;};
                 _0x7:
000096 30e1      	CPI  R30,LOW(0x1)
000097 f419      	BRNE _0xC
000098 98a8      	CBI  0x15,0
000099 9aa9      	SBI  0x15,1
00009a c004      	RJMP _0x23
                 ;      83   case 2:{digit2=0;digit3=1;PORTD=digits[digit_out[cur_dig]];break;};
                 _0xC:
00009b 30e2      	CPI  R30,LOW(0x2)
00009c f461      	BRNE _0x6
00009d 98a9      	CBI  0x15,1
00009e 9aaa      	SBI  0x15,2
                 _0x23:
00009f 2de5      	MOV  R30,R5
0000a0 e0f0      	LDI  R31,0
0000a1 5ae0      	SUBI R30,LOW(-_digit_out)
0000a2 4ffe      	SBCI R31,HIGH(-_digit_out)
0000a3 81e0      	LD   R30,Z
0000a4 e0f0      	LDI  R31,0
0000a5 5dea      	SUBI R30,LOW(-_digits*2)
0000a6 4fff      	SBCI R31,HIGH(-_digits*2)
0000a7 9004      	LPM  R0,Z
0000a8 ba02      	OUT  0x12,R0
                 ;      84   }
                 _0x6:
                 ;      85   cur_dig++;
0000a9 9453      	INC  R5
                 ;      86   if (cur_dig==3) cur_dig=0;
0000aa e0e3      	LDI  R30,LOW(3)
0000ab 15e5      	CP   R30,R5
0000ac f409      	BRNE _0x16
0000ad 2455      	CLR  R5
                 ;      87 }
                 _0x16:
0000ae 91e9      	LD   R30,Y+
0000af bfef      	OUT  SREG,R30
0000b0 91f9      	LD   R31,Y+
0000b1 91e9      	LD   R30,Y+
0000b2 9009      	LD   R0,Y+
0000b3 9518      	RETI
                 ;      88 
                 ;      89 // Timer 2 output compare interrupt service routine
                 ;      90 interrupt [TIM2_COMP] void timer2_comp_isr(void)
                 ;      91 {
                 _timer2_comp_isr:
0000b4 93ea      	ST   -Y,R30
                 ;      92 PORTC=0x00;
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 bbe5      	OUT  0x15,R30
                 ;      93 }
0000b7 91e9      	LD   R30,Y+
0000b8 9518      	RETI
                 ;      94 
                 ;      95 // Declare your global variables here
                 ;      96 
                 ;      97 void main(void)
                 ;      98 {
                 _main:
                 ;      99 // Declare your local variables here
                 ;     100 
                 ;     101 // Input/Output Ports initialization
                 ;     102 // Port B initialization
                 ;     103 PORTB=0x00;
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba bbe8      	OUT  0x18,R30
                 ;     104 DDRB=0x00;
0000bb bbe7      	OUT  0x17,R30
                 ;     105 
                 ;     106 // Port C initialization
                 ;     107 PORTC=0x00;
0000bc bbe5      	OUT  0x15,R30
                 ;     108 DDRC=0x07;
0000bd e0e7      	LDI  R30,LOW(7)
0000be bbe4      	OUT  0x14,R30
                 ;     109 
                 ;     110 // Port D initialization
                 ;     111 PORTD=0x04;
0000bf e0e4      	LDI  R30,LOW(4)
0000c0 bbe2      	OUT  0x12,R30
                 ;     112 DDRD=0xFB;
0000c1 efeb      	LDI  R30,LOW(251)
0000c2 bbe1      	OUT  0x11,R30
                 ;     113 
                 ;     114 // Timer/Counter 1 initialization
                 ;     115 TCCR1A=0x00;
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 bdef      	OUT  0x2F,R30
                 ;     116 TCCR1B=0x05;
0000c5 e0e5      	LDI  R30,LOW(5)
0000c6 bdee      	OUT  0x2E,R30
                 ;     117 TCNT1=0x0000;
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 e0f0      	LDI  R31,HIGH(0)
0000c9 bdfd      	OUT  0x2C+1,R31
0000ca bdec      	OUT  0x2C,R30
                 ;     118 ICR1H=0x00;
0000cb bde7      	OUT  0x27,R30
                 ;     119 ICR1L=0x00;
0000cc bde6      	OUT  0x26,R30
                 ;     120 OCR1AH=0x1E;
0000cd e1ee      	LDI  R30,LOW(30)
0000ce bdeb      	OUT  0x2B,R30
                 ;     121 OCR1AL=0x84;
0000cf e8e4      	LDI  R30,LOW(132)
0000d0 bdea      	OUT  0x2A,R30
                 ;     122 OCR1BH=0x00;
0000d1 e0e0      	LDI  R30,LOW(0)
0000d2 bde9      	OUT  0x29,R30
                 ;     123 OCR1BL=0x00;
0000d3 bde8      	OUT  0x28,R30
                 ;     124 
                 ;     125 // Timer/Counter 2 initialization
                 ;     126 ASSR=0x00;
0000d4 bde2      	OUT  0x22,R30
                 ;     127 TCCR2=0x04;
0000d5 e0e4      	LDI  R30,LOW(4)
0000d6 bde5      	OUT  0x25,R30
                 ;     128 TCNT2=0x00;
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 bde4      	OUT  0x24,R30
                 ;     129 OCR2=0x80;  // PWM value
0000d9 e8e0      	LDI  R30,LOW(128)
0000da bde3      	OUT  0x23,R30
                 ;     130 
                 ;     131 // External Interrupt(s) initialization
                 ;     132 GICR|=0x40;
0000db b7eb      	IN   R30,0x3B
0000dc 64e0      	ORI  R30,0x40
0000dd bfeb      	OUT  0x3B,R30
                 ;     133 MCUCR=0x02;
0000de e0e2      	LDI  R30,LOW(2)
0000df bfe5      	OUT  0x35,R30
                 ;     134 GIFR=0x40;
0000e0 e4e0      	LDI  R30,LOW(64)
0000e1 bfea      	OUT  0x3A,R30
                 ;     135 
                 ;     136 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ;     137 TIMSK=0x40;
0000e2 bfe9      	OUT  0x39,R30
                 ;     138 
                 ;     139 // Analog Comparator initialization
                 ;     140 
                 ;     141 ACSR=0x80;
0000e3 e8e0      	LDI  R30,LOW(128)
0000e4 b9e8      	OUT  0x8,R30
                 ;     142 SFIOR=0x00;
0000e5 e0e0      	LDI  R30,LOW(0)
0000e6 bfe0      	OUT  0x30,R30
                 ;     143 
                 ;     144 i=0;
0000e7 2488      	CLR  R8
0000e8 2499      	CLR  R9
                 ;     145 
                 ;     146 // Global enable interrupts
                 ;     147 #asm("sei")
0000e9 9478      	sei
                 ;     148 
                 ;     149 
                 ;     150 for (y=0;y<3;y++)
0000ea e0e0      	LDI  R30,0
0000eb 93e0 0163 	STS  _y,R30
0000ed 93e0 0164 	STS  _y+1,R30
                 _0x18:
0000ef 91a0 0163 	LDS  R26,_y
0000f1 91b0 0164 	LDS  R27,_y+1
0000f3 9713      	SBIW R26,3
0000f4 f514      	BRGE _0x19
                 ;     151 {
                 ;     152   for (x=11;x<17;x++)
0000f5 e0eb      	LDI  R30,LOW(11)
0000f6 e0f0      	LDI  R31,HIGH(11)
0000f7 016f      	MOVW R12,R30
                 _0x1B:
0000f8 e1e1      	LDI  R30,LOW(17)
0000f9 e0f0      	LDI  R31,HIGH(17)
0000fa 16ce      	CP   R12,R30
0000fb 06df      	CPC  R13,R31
0000fc f484      	BRGE _0x1C
                 ;     153   {
                 ;     154     digit_out[0]=x;
0000fd 01f6      	MOVW R30,R12
0000fe 93e0 0160 	STS  _digit_out,R30
                 ;     155     digit_out[1]=x;
000100 92c0 0161 	__PUTBMRN _digit_out,1,12
                 ;     156     digit_out[2]=x;
000102 92c0 0162 	__PUTBMRN _digit_out,2,12
                 ;     157     delay_ms(50);
000104 e3e2      	LDI  R30,LOW(50)
000105 e0f0      	LDI  R31,HIGH(50)
000106 93fa      	ST   -Y,R31
000107 93ea      	ST   -Y,R30
000108 d022      	RCALL _delay_ms
                 ;     158   }
000109 01f6      	MOVW R30,R12
00010a 9631      	ADIW R30,1
00010b 016f      	MOVW R12,R30
00010c cfeb      	RJMP _0x1B
                 _0x1C:
                 ;     159 }
00010d 91e0 0163 	LDS  R30,_y
00010f 91f0 0164 	LDS  R31,_y+1
000111 9631      	ADIW R30,1
000112 93e0 0163 	STS  _y,R30
000114 93f0 0164 	STS  _y+1,R31
000116 cfd8      	RJMP _0x18
                 _0x19:
                 ;     160 
                 ;     161 
                 ;     162 TIMSK=0x50;
000117 e5e0      	LDI  R30,LOW(80)
000118 bfe9      	OUT  0x39,R30
                 ;     163 
                 ;     164 
                 ;     165 while (1)
                 _0x1D:
                 ;     166 {
                 ;     167   if (PINB.0==1) TIMSK=0xD0;
000119 9bb0      	SBIS 0x16,0
00011a c002      	RJMP _0x20
00011b ede0      	LDI  R30,LOW(208)
00011c c001      	RJMP _0x24
                 ;     168   else TIMSK=0x50;
                 _0x20:
00011d e5e0      	LDI  R30,LOW(80)
                 _0x24:
00011e bfe9      	OUT  0x39,R30
                 ;     169   indication=(imp*36)/40;  //20 - 4 imp/m, 30 - 6 imp/m, 40 - 8 imp/m
00011f 01d5      	MOVW R26,R10
000120 e2e4      	LDI  R30,LOW(36)
000121 e0f0      	LDI  R31,HIGH(36)
000122 d014      	RCALL __MULW12U
000123 01df      	MOVW R26,R30
000124 e2e8      	LDI  R30,LOW(40)
000125 e0f0      	LDI  R31,HIGH(40)
000126 d018      	RCALL __DIVW21U
000127 013f      	MOVW R6,R30
                 ;     170   recoding();
000128 df23      	RCALL _recoding
                 ;     171 }
000129 cfef      	RJMP _0x1D
                 ;     172 }
                 _0x22:
00012a cfff      	RJMP _0x22
                 
                 
                 _delay_ms:
00012b 91e9      	ld   r30,y+
00012c 91f9      	ld   r31,y+
00012d 9630      	adiw r30,0
00012e f039      	breq __delay_ms1
                 __delay_ms0:
00012f ed80
000130 e097
000131 9701
000132 f7f1      	__DELAY_USW 0x7D0
000133 95a8      	wdr
000134 9731      	sbiw r30,1
000135 f7c9      	brne __delay_ms0
                 __delay_ms1:
000136 9508      	ret
                 
                 __MULW12U:
000137 9ffa      	MUL  R31,R26
000138 2df0      	MOV  R31,R0
000139 9feb      	MUL  R30,R27
00013a 0df0      	ADD  R31,R0
00013b 9fea      	MUL  R30,R26
00013c 2de0      	MOV  R30,R0
00013d 0df1      	ADD  R31,R1
00013e 9508      	RET
                 
                 __DIVW21U:
00013f 2400      	CLR  R0
000140 2411      	CLR  R1
000141 e190      	LDI  R25,16
                 __DIVW21U1:
000142 0faa      	LSL  R26
000143 1fbb      	ROL  R27
000144 1c00      	ROL  R0
000145 1c11      	ROL  R1
000146 1a0e      	SUB  R0,R30
000147 0a1f      	SBC  R1,R31
000148 f418      	BRCC __DIVW21U2
000149 0e0e      	ADD  R0,R30
00014a 1e1f      	ADC  R1,R31
00014b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00014c 60a1      	SBR  R26,1
                 __DIVW21U3:
00014d 959a      	DEC  R25
00014e f799      	BRNE __DIVW21U1
00014f 01fd      	MOVW R30,R26
000150 01d0      	MOVW R26,R0
000151 9508      	RET
                 
                 __MODW21U:
000152 dfec      	RCALL __DIVW21U
000153 01fd      	MOVW R30,R26
000154 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  16 r1 :   6 r2 :   0 r3 :   0 r4 :   0 r5 :   5 r6 :  11 r7 :   1 
r8 :   5 r9 :   2 r10:   2 r11:   0 r12:   7 r13:   1 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  20 r27:   5 r28:   1 r29:   1 r30: 143 r31:  42 
x  :   3 y  :  23 z  :   9 
Registers used: 22 out of 35 (62.9%)

ATmega8 instruction use summary:
adc   :   1 add   :   3 adiw  :   4 and   :   0 andi  :   0 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 
break :   0 breq  :   2 brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :  10 brpl  :   0 
brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 cbi   :   3 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 
cln   :   0 clr   :   9 cls   :   0 clt   :   0 clv   :   0 clz   :   0 
com   :   0 cp    :   3 cpc   :   2 cpi   :   3 cpse  :   0 dec   :   2 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   1 ld    :  11 ldd   :   0 ldi   :  68 lds   :   4 
lpm   :   8 lsl   :   1 lsr   :   0 mov   :   4 movw  :  25 mul   :   3 
muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   1 
out   :  42 pop   :   0 push  :   0 rcall :  11 ret   :   5 reti  :   3 
rjmp  :  31 rol   :   3 ror   :   0 sbc   :   1 sbci  :   2 sbi   :   3 
sbic  :   0 sbis  :   1 sbiw  :   6 sbr   :   1 sbrc  :   0 sbrs  :   0 
sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 
set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  16 
std   :   0 sts   :  10 sub   :   1 subi  :   2 swap  :   0 tst   :   0 
wdr   :   1 
Instructions used: 44 out of 109 (40.4%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002aa    662     20    682    8192   8.3%
[.dseg] 0x000060 0x000165      0      5      5    1024   0.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
